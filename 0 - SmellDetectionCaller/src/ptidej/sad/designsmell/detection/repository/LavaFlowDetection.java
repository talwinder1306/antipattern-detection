/*******************************************************************************
 * Copyright (c) 2001-2014 Yann-Ga�l Gu�h�neuc and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Yann-Ga�l Gu�h�neuc and others, see in file; API and its implementation
 ******************************************************************************/
package ptidej.sad.designsmell.detection.repository;

/**
 * This class implements the detection algorithms 
 * of the design smell AntiSingleton.
 * 
 * @author Autogenerated files
 * 
 */

import padl.kernel.IAbstractLevelModel;
import ptidej.sad.codesmell.detection.repository.UnusedClassDetection;
import ptidej.sad.codesmell.detection.repository.UnusedFieldDetection;
import ptidej.sad.codesmell.detection.repository.UnusedMethodDetection;
import sad.codesmell.detection.ICodeSmellDetection;
import sad.codesmell.detection.repository.AntiSingleton.NotClassGlobalVariableDetection;
import sad.designsmell.detection.IDesignSmellDetection;
import sad.designsmell.detection.repository.AbstractDesignSmellDetection;
import sad.kernel.ICodeSmell;
import sad.kernel.impl.DesignSmell;
import sad.util.OperatorsCodeSmells;
import sad.util.Relationships;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class LavaFlowDetection extends AbstractDesignSmellDetection implements IDesignSmellDetection {
	private final OperatorsCodeSmells operators;
	private final Relationships relations;

	public LavaFlowDetection() {
		super();

		this.operators = OperatorsCodeSmells.getInstance();
		this.relations = Relationships.getInstance();
	}

	public String getName() {
		return "LavaFlow";
	}

	public String getRuleCardFile() {
		return "../SAD Rules Creator/rsc/LavaFlow.rules";
	}

	public void detect(final IAbstractLevelModel anAbstractLevelModel) {
		final Set candidateDesignSmells = new HashSet();

		final ICodeSmellDetection unusedClassVariable = new UnusedClassDetection();
		final ICodeSmellDetection unusedMethodVariable = new UnusedMethodDetection();
		final ICodeSmellDetection unusedFieldVariable = new UnusedFieldDetection();
		
		unusedClassVariable.detect(anAbstractLevelModel);
		unusedMethodVariable.detect(anAbstractLevelModel);
		unusedFieldVariable.detect(anAbstractLevelModel);
		
		final Set setUnusedClassDetection = unusedClassVariable.getCodeSmells();
		final Set setUnusedMethodDetection = unusedMethodVariable.getCodeSmells();
		final Set setUnusedFieldDetection = unusedFieldVariable.getCodeSmells();
		
		final Set setUnusedClassAndMethod = 
				this.operators.union(setUnusedClassDetection, setUnusedMethodDetection);
		final Set setUnusedClassMethodAndField = 
				this.operators.union(setUnusedClassAndMethod, setUnusedFieldDetection);
		
		final Iterator iterSet = setUnusedClassMethodAndField.iterator();
		while (iterSet.hasNext()) {
			final ICodeSmell aCodeSmell = (ICodeSmell) iterSet.next();
			final DesignSmell designSmell = new DesignSmell(aCodeSmell);
			designSmell.setName("LavaFlow");
			final String definition = "To defined";
			designSmell.setDefinition(definition);
			candidateDesignSmells.add(designSmell);
		}
		this.setSetOfDesignSmells(candidateDesignSmells);
	}
}
